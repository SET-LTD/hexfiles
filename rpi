#!/bin/bash
#start this script by typing: bash <(curl -sL https://raw.githubusercontent.com/SET-LTD/hexfiles/master/rpi)
echo "          _____                    _____                _____           ";
echo "         /\    \                  /\    \              /\    \          ";
echo "        /::\    \                /::\    \            /::\    \         ";
echo "       /::::\    \              /::::\    \           \:::\    \        ";
echo "      /::::::\    \            /::::::\    \           \:::\    \       ";
echo "     /:::/\:::\    \          /:::/\:::\    \           \:::\    \      ";
echo "    /:::/__\:::\    \        /:::/__\:::\    \           \:::\    \     ";
echo "    \:::\   \:::\    \      /::::\   \:::\    \          /::::\    \    ";
echo "  ___\:::\   \:::\    \    /::::::\   \:::\    \        /::::::\    \   ";
echo " /\   \:::\   \:::\    \  /:::/\:::\   \:::\    \      /:::/\:::\    \  ";
echo "/::\   \:::\   \:::\____\/:::/__\:::\   \:::\____\    /:::/  \:::\____\ ";
echo "\:::\   \:::\   \::/    /\:::\   \:::\   \::/    /   /:::/    \::/    / ";
echo " \:::\   \:::\   \/____/  \:::\   \:::\   \/____/   /:::/    / \/____/  ";
echo "  \:::\   \:::\    \       \:::\   \:::\    \      /:::/    /           ";
echo "   \:::\   \:::\____\       \:::\   \:::\____\    /:::/    /            ";
echo "    \:::\  /:::/    /        \:::\   \::/    /    \::/    /             ";
echo "     \:::\/:::/    /          \:::\   \/____/      \/____/              ";
echo "      \::::::/    /            \:::\    \                               ";
echo "       \::::/    /              \:::\____\                              ";
echo "        \::/    /                \::/    /                              ";
echo "         \/____/                  \/____/                               ";
echo "                                                                        ";

echo "Starting Jakubs Script to install all software from clean image      ";

read -p "Do you wish to auto configure SSL?  Input y/n and hit enter: " askssl
read -p "Do you wish to auto configure static?  Input y/n and hit enter: " staticxxx

if [ "$staticxxx" = y ];  then
     echo "Asking user input"
     read -p "What static ip adress would you like?  Input example 192.168.0.99 and hit enter: " dhcp_static_client
     read -p "What is the adress of the gateway?  Input example 192.168.0.1 and hit enter: " dhcp_static_gateway

     read -p "Do you wish to auto configure ethernet or wifi?  Input e/w and hit enter: " static_interface
     read -p "Do you wish to configure x509?  Input y/n and hit enter: " staticx509
     

     echo "XXXX"
     if [ "$static_interface" = w ];  then
          echo "download wifi template"
          sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/my_wget_dhcp_wlan -P /etc/
          sudo mv /etc/my_wget_dhcp_wlan /etc/dhcpcd.conf
     else
          echo "download ethernet template"
          sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/my_wget_dhcp_eth -P /etc/
          sudo mv /etc/my_wget_dhcp_eth /etc/dhcpcd.conf     
     fi
     echo "configure settings here"
     sudo sed -i "s/kkk/${dhcp_static_client}/g" /etc/dhcpcd.conf
     sudo sed -i "s/mmm/${dhcp_static_gateway}/g" /etc/dhcpcd.conf

else
  echo "not configuring static settings"
fi


sudo apt-get update -y
sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/cron_can.sh -P /home/pi/
sudo chmod +x /home/pi/cron_can.sh
sudo crontab -l | grep -v cron_can.sh | { cat; echo "@reboot /home/pi/cron_can.sh > /dev/null"; } | sudo crontab

sudo apt-get install can-utils -y
sudo apt-get install putty-tools -y
sudo apt-get install screen -y
sudo apt-get install libffcall-dev -y
sudo apt-get install ntp -y
sudo apt-get install libssl-dev -y
sudo apt-get install jq -y

cd
mkdir ~/.ssh
cd .ssh

ssh-keygen -f id_rsa -N ""
#generate keys no passfrase
cat id_rsa.pub >> authorized_keys
#activate key
puttygen id_rsa -o id_rsa.ppk
#convert key file to putty format
#use private key to login
#To download key from other computer
#scp pi@192.168.0.199:/home/pi/.ssh/id_rsa .
#To login on other computer
#ssh -i id_rsa pi@192.168.0.199



cd

sudo apt install build-essential git -y
bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered)<<EOF
y
y
EOF
cd /home/pi/.node-red/
sudo npm install -g node-red-admin -y
sudo npm install node-red-dashboard -y
sudo npm install node-red-contrib-arp -y
sudo npm install node-red-contrib-browser-utils -y
sudo npm install node-red-contrib-safe-queue -y
#sudo npm install node-red-contrib-socketcan -y
sudo npm install red-contrib-socketcan -y
mkdir /home/pi/.node-red/nodecerts

cd /home/pi/.node-red/nodecerts
openssl genrsa -out privatekey.pem 2048 
#next command needs fillin out
openssl req -new -key privatekey.pem -out private-csr.pem<<EOF
GB
Derbyshire
Derby
SET
HQ
192.168.0.200
jakubwton@aol.com
Test123
SET
EOF

openssl x509 -req -days 3560 -in private-csr.pem -signkey privatekey.pem -out certificate.pem
openssl x509 -outform der -in certificate.pem -out certificate.crt

     if [ "$staticx509" = y ];  then
          echo "downloading settings.js"
          #update the node-red settings.js
          #wget
          #restart will be required
          cd /home/pi/.node-red/
          sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/settings.js_x509 -P /home/pi/.node-red/
          rm settings.js
          sudo mv /home/pi/.node-red/settings.js_x509 /home/pi/.node-red/settings.js
          echo "downloading settings.js"
     else
          echo "not configuring settings.js"
     fi



sudo sed -i -e "\$adtparam=spi=on" /boot/config.txt
sudo sed -i -e "\$adtoverlay=mcp2515-can0,oscillator=16000000,interrupt=25" /boot/config.txt
sudo sed -i -e "\$adtoverlay=spi-bcm2835-overlay" /boot/config.txt
sudo sed -i -e "\$adtoverlay=spi-dma" /boot/config.txt
sudo sed -i -e "\$adtparam=i2c_vc=on" /boot/config.txt
sudo sed -i -e "\$adtoverlay=i2c-rtc,pcf85063a,i2c_csi_dsi" /boot/config.txt
sudo sed -i -e "\$aenable_tvout=0"
echo "Fixing usb not working cm4 hub      ";

sudo sed -i -e "\$adtoverlay=dwc2,dr_mode=host" /boot/config.txt

sudo sed -i -e "\$a\$ETHTOOL --change eth0 advertise 0x00f" /etc/network/if-pre-up.d/ethtool 

#sudo systemctl enable nodered.service

cd /home/pi
rm -rf cliflash
mkdir temp
cd temp
wget https://github.com/PaulStoffregen/teensy_loader_cli/archive/master.zip
sudo apt-get install libusb-dev -y
unzip master.zip
mv teensy_loader_cli-master cliflash
mv cliflash  /home/pi
cd /home/pi
rm -rf temp
cd /home/pi/cliflash
make
cd /home/pi
sed -i -e  "\$aPATH=\$PATH:/home/pi/cliflash"  .bashrc
sudo wget https://www.pjrc.com/teensy/49-teensy.rules -P /etc/udev/rules.d

cd /home/pi
sudo apt-get install moreutils -y
sudo apt-get install dnsutils -y
sudo apt-get install git -y
myhostnamedot="$(dig -x $(dig +short myip.opendns.com @resolver1.opendns.com) +short)"
myhostname=`echo $myhostnamedot | sed "s/\.$//"`


cd /home/pi
sudo wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key -P /home/pi
sudo apt-key add /home/pi/mosquitto-repo.gpg.key
sudo wget http://repo.mosquitto.org/debian/mosquitto-buster.list -P /etc/apt/sources.list.d
sudo apt-get update -y
#sudo apt-get install mosquitto -y
if [ "$askssl" = y ] ; then
  sudo rm /etc/mosquitto/mosquitto.conf
  sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/mosquitto.conf -P /etc/mosquitto
  sudo sed -i "s/xxx/${myhostname}/g" /etc/mosquitto/mosquitto.conf
else
  echo "not configured mosquitto SSL"
fi
cd /home/pi
#sudo apt-get install nginx-full certbot -y
if [ "$askssl" = y ] ; then
  sudo rm /etc/nginx/sites-enabled/default
  sudo rm /etc/nginx/sites-available/default
  sudo wget https://raw.githubusercontent.com/SET-LTD/hexfiles/master/node -P /etc/nginx/sites-available
  sudo sed -i "s/xxx/${myhostname}/g" /etc/nginx/sites-available/node
  sudo ln -s /etc/nginx/sites-available/node /etc/nginx/sites-enabled/node
  sudo certbot certonly  --authenticator standalone -d ${myhostname}  --pre-hook "service nginx stop" --post-hook "service nginx start"
else
  echo "not configured nginx SSL"
fi

sudo node-red-stop

#turn off auth logging
line=$(grep -n -1 "/var/log/auth.log" /etc/rsyslog.conf | head -1 | cut -d "-"  -f 1)
sudo sed -e ''"${line}"'i:msg, contains, "TTY=" ~' -i /etc/rsyslog.conf
sudo sed -e ''"${line}"'i:msg, contains, "pam_unix" ~' -i /etc/rsyslog.conf
service rsyslog restart
#cd /home/pi/.node-red/
#sudo nano settings.js

#editorTheme: {
#        projects: {
#            // To enable the Projects feature, set this value to true
#            enabled: false
#        }
#    }

#this is one documented method, but it doesnt seem to work...
#git -c http.extraheader="AUTHORIZATION:bearer ${pat}" clone https://<user>@github.com/<organisation>/<repo>.git ./<local_path>

cd /home/pi
rm -rf Laurence
mkdir Laurence
sudo apt-get install git -y
#the PAT token is encrypted with a secret password to stop hackers finding it on public repo and causing an issue
#to process a new PAT (generated using developer settings page in your github account) 
##For the public access PAT
#1) write it to a file, e.g. Harvester_PAT.txt
#2) gpg -c Harvester_PAT.txt
#3) base64 Harvester_PAT.txt.gpg >PAT_pub.txt
#4) rm Harvester_PAT.txt.gpg
##For the private access PAT
#(note that you will need to have the Uhura keys installed before you do this)
#1) write it to a file, e.g. Harvester_PAT.txt (could use nano)
#2) gpg --encrypt -r laurence.blaxter@set-gb.com Harvester_PAT.txt
#3) base64 Harvester_PAT.txt.gpg > PAT.txt
#4) rm Harvester_PAT.txt.gpg
#This is also available as a script: "Generate_PATs.sh" in the private repo
PAT=$(curl -sL https://raw.githubusercontent.com/SET-LTD/hexfiles/master/PAT_pub.txt)
echo $PAT > PAT_temp.txt
base64 -di PAT_temp.txt > Harvester_PAT.txt.gpg
rm PAT_temp.txt
gpg -d Harvester_PAT.txt.gpg > Harvester_PAT.txt
rm Harvester_PAT.txt.gpg
pat=$(cat Harvester_PAT.txt)
#now clone the private repo
git clone https://${pat}@github.com/SET-LTD/TfW-Harvester-Repo.git  ./Laurence

cd Laurence
#start by installing the public and private keys (public key is in the repo, private key needs unlocking)
#the Uhura public and private keys last for >10 years, so once installed, this code shouldnt have to be changed much
#after using keygen, call  gpg --pinentry-mode loopback --passwd then enter the password once, then blank password twice to disable the password on the private key
#use gpg --export-secret-keys --armor to export the key files if you ever generate new project keys
#after generating the public and private keys using gpg, the private key is then encrypted using gpg:
#1) gpg -c Uhura_private.key (use the standard password)
#2) base64 Uhura_private.key.gpg > Uhura_private.txt
#3) rm Uhura_private.key.pgp
#note that PAT.txt, Uhura_private.txt, and Uhura_public.key are part of the repository, so can be updated, but only PAT.txt should be regularly updated
#there will also be an encrypted, base64 encoded revocation certificate for the keys on the github repository
base64 -di Uhura_private.txt > Uhura_private.key.gpg
gpg -d Uhura_private.key.gpg > Uhura_private.key
rm Uhura_private.key.gpg
gpg --import Uhura_private.key
gpg --import Uhura_public.key
base64 -di PAT.txt > PAT.txt.gpg
PAT=$(gpg --decrypt PAT.txt.gpg )
echo $PAT > Harvester_PAT.txt
rm PAT.txt.gpg
#first of all we should change the default password, this config sets the new password to the same as the first unit 
#to alter this prompt:
#1) echo $password > Password.txt
#2) gpg --encrypt -r laurence.blaxter@set-gb.com Password.txt
#3) base64 Password.txt.gpg 
#4) copy output to line below
#5) rm Password.txt
echo "hQGMAxsoKjNjUXblAQwAgNpPWyNAL9R4Fx1xsLkyM1bJgRrVuuEIUFGNuo3epugLUWcdRA4f2LoH6Q+yy1XuoB6wnQZY3HigrQQx3kVi0jzVY4OCl4KLTDyhta21vhYt/nKtC4TBvrLIMOfGAeaQXOCQd6n6oFIsEgHDbEQ3XfxHpOU22ewRsdosA5P6DWtrIivMIr+gTw5BLB07gghKw0DsimE3c3KRmMaj3WZ4Pl9WsUobi9d6chG8VQWZTAkYbKkq2zX2ohtInzENoX674qwNejMajPM+6E2idcZVLUiWrnQ4NyZ1eyFPvvsXQ4KpRbw+TG+zOTcABwE8Cjh+ARDwHFvDcx9G/vCXX7uelVWQXin/eHj2Nu3GOtwjHh0ZCmjzLux2f4DDIoAE+z2oHdks3OeMcNKcehqSAPlXNxnyJinD9CHK5SDbs+a4AKif2b2LktPJw59wgNOq6sUkb0tJIyoZD3j1tofjqO3VvKVzX7Z67uDSZpDJUWS/MKEaotFEnQncePpucZCg9Xo+0lABerBvL1kCGJhb4QZny13mtKY2rbjc4R/ERrn5z4CLOwZ3ZbH28GJ17wwMbuUPBF2Vd4EzDIqmHKZT4Xyt0BKlDqw5hvs616OHswd4NQHX6A==" > Password.txt
base64 -di Password.txt > Password.txt.gpg
rm Password.txt
pass=$(gpg --decrypt Password.txt.gpg )
rm Password.txt.gpg
echo "You should now enter a new password, suggested password is '${pass}'"
read -p "(press enter to continue or enter n to leave unchanged)" rep
if [[ $rep =~ ^[Nn]$ ]]; then
	echo "leaving the password unchanged"
else 
	passwd
fi

cd ~/
#The FAT35 partition is mounted as /boot, named/labelled 'boot' and holds kernel images and overlay files, it is 256M in size by default, but only around 50M are usually used
#By reducing the size by 25% to 192M, 64M are freed, this is enough for 1 week of storage under typical service conditions
#The raw device can be accessed as /dev/mmcblk0p3, this partition is unformatted, (but set up as ext2 in parted), and is named 'archive' by parted
#The contents of the /boot partition are temporarily backed up to a folder (boot_backup) whilst these changes are applied.
#!!! IT IS VERY IMPORTANT THAT THE DEVICE DOES NOT LOSE POWER WHILST THESE CHANGES ARE BEING MADE OR IT WILL BE BRICKED !!!
echo "Repartitioning the eMMC"
echo "IT IS VERY IMPORTANT THAT THE DEVICE DOES NOT LOSE POWER WHILST THESE CHANGES ARE BEING MADE OR IT WILL BE BRICKED"
read -p "(press enter to continue or enter n to skip this step)" rep
if [[ $rep =~ ^[Nn]$ ]]; then
	echo "Leaving the eMMC partitions unchanged"
else 
	echo "Starting repartitioning..."
	echo "DO NOT DISCONNECT THE POWER UNTIL THIS IS COMPLETED"
	cd ~/
	sudo rm -rf boot_backup
	set -e
	mkdir boot_backup
	sudo rsync -r /boot/ ./boot_backup
	sudo umount /dev/mmcblk0p1
	echo -e "yes\n" | sudo parted /dev/mmcblk0 ---pretend-input-tty resizepart 1 401407s
	sudo mkfs.fat -F 32 /dev/mmcblk0p1 196608
	sudo fatlabel /dev/mmcblk0p1 boot
	sudo mount /dev/mmcblk0p1 /boot
	set +e
	echo -e "1\ny\n1\ny\n1\ny\n1\ny\n" | sudo fsck /dev/mmcblk0p1
	set -e
	sudo rsync -r boot_backup/ /boot
	sudo parted /dev/mmcblk0 set 1 boot on
	sudo rm -r ./boot_backup
	echo -e "p\next2\n401408s\n532479s\nI" | sudo parted /dev/mmcblk0 ---pretend-input-tty mkpart 
	set +e
	#This will fail of anything that isn't using GPT (stock CM4 used 'msdos' type according to parted), so unset the 'e' option so it continues
	sudo parted /dev/mmcblk0 name 3 'archive'
	echo "eMMC repartitioning completed"
fi

#Patch the eeprom to enable full software shutdown (only Global_En can wake the pi, but this is connected to RTC on the Harvester) - eeprom edit is disabled on CM4 unfortunately
ver=$(< /sys/firmware/devicetree/base/model )
isfour=$( echo $ver | grep "Compute Module 4")
if (( ${#isfour} < 5 )) ; then
	sudo sed -i -e "CM4_ENABLE_RPI_EEPROM_UPDATE=1" /etc/default/rpi-eeprom-update
	echo -e "[all]\nBOOT_UART=0\nWAKE_ON_GPIO=0\nPOWER_OFF_ON_HALT=1\n\n# Try  SD- > USB PCIe MSD -> USB 2.0 BCM XHCI -> Network ->  Loop\nBOOT_ORDER=0xf2541\n\n" > boot_eeprom.conf
	echo -e "# Set to 0 to prevent bootloader updates from USB/Network boot\n# For remote units EEPROM hardware write protection should be used.\n\nENABLE_SELF_UPDATE=1\n" >> boot_eeprom.conf
	sudo rpi-eeprom-config --apply boot_eeprom.conf
	rm boot_eeprom.conf
fi

cd ~/Laurence
#Now compile and install the code
chmod +x *.sh
sudo cp update_install.sh ../
echo "To update the installation with the latest code from github at any point, run the script update_install.sh"
cd ../
./update_install.sh
cd ~/Laurence
sudo ./program_otp.sh
echo "Harvester configuration is now finished, a (software) reboot is suggested"
echo "(type 'reboot' then enter/return)"
cd ../
